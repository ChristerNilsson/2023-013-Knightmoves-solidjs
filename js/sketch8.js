// Generated by CoffeeScript 2.5.1
var ILLEGALS, KNIGHT, KNIGHT_HOPS, QUEEN, S, TARGET, click, count, counts, game, illegals, info, knight, knightHops, makeCount, makeCounts, makeIllegals, makeKnight, makeKnightHops, makeMask, makeQueen, makeQueens, makeState, makeTaken, makeTarget, makeTargets, mask, queen, queens, show, showCircles, showCounts, showInfo, showLittera, showPieces, showRects, start, state, state0, state1, state2, taken, target, targets,
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  abs,
  N,
  col,
  row,
  log,
  Position,
  range,
  r4r,
  sum
} from '../js/utils8.js';

import {
  svg,
  rect,
  text,
  circle,
  g
} from '../js/utils8.js';

log("no reactivity");

QUEEN = '♛';

KNIGHT = '♘';

S = 62; // square size

state = -1; // 0 or 1

queens = []; // indexes

queen = -1; // index

knight = -1; // index 

illegals = []; // indexes

targets = []; // indexes

taken = -1; // count

target = -1; // index

knightHops = []; // indexes

count = 0; // count

counts = []; // counts moves per square

mask = 0; // 0,1,2 or 3

info = [];

start = 0;

show = (a, b) => {
  log(a, b);
  return b;
};

makeState = (state) => {
  return show('state', state);
};

makeQueens = () => { // anger de rutor som damen kan placeras på
  var c, cx, cy, dx, dy, j, k, len, len1, r, ref, ref1, ref2, res;
  cx = 7; // board center x
  cy = 7; // board center y
  res = [];
  ref = range(N);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ref1 = range(N);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      c = ref1[k];
      dx = abs(2 * c - cx);
      dy = abs(2 * r - cy);
      if ((ref2 = dx * dy) !== 3 && ref2 !== 7 && ref2 !== 9 && ref2 !== 15) {
        res.push(c + 8 * r);
      }
    }
  }
  res.sort(function(a, b) {
    return a - b;
  });
  return show('queens', res);
};

makeQueen = (queen) => {
  return show('queen', queen);
};

makeMask = (queen) => {
  return show('mask', (row(queen) + col(queen)) % 4);
};

makeIllegals = (queen) => {
  if (queen === -1) {
    return [];
  }
  return show('illegals', _.filter(range(N * N), (i) => {
    var ci, cq, dc, dr, ri, rq;
    ci = col(i);
    ri = row(i);
    cq = col(queen);
    rq = row(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    return ci === cq || ri === rq || dc === dr;
  }));
};

makeTargets = (illegals) => {
  var res;
  if (illegals === []) {
    return [];
  }
  res = range(N * N).filter((i) => {
    return !illegals.includes(i);
  });
  res.sort(function(a, b) {
    return b - a;
  });
  return show('targets', res);
};

makeTaken = (taken) => {
  var res;
  if (taken === 64) {
    res = -1;
  } else {
    res = taken;
  }
  return show('taken', res);
};

makeTarget = (target) => {
  return show('target', target);
};

makeCount = (count) => {
  return show('count', count);
};

makeCounts = (counts) => {
  return show('counts', counts);
};

makeKnight = (targets) => {
  if (targets.length === 64) {
    return -1;
  }
  return show('knight', targets[0]);
};

makeKnightHops = (knight) => {
  var c, c2, dc, dr, index, j, k, len, len1, r, r2, ref, ref1, res;
  if (knight === -1) {
    return [];
  }
  res = [];
  c = col(knight);
  r = row(knight);
  ref = [-2, -1, 1, 2];
  for (j = 0, len = ref.length; j < len; j++) {
    dc = ref[j];
    ref1 = [-2, -1, 1, 2];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dr = ref1[k];
      if (abs(dc) === abs(dr)) {
        continue;
      }
      c2 = c + dc;
      r2 = r + dr;
      index = c2 + 8 * r2;
      if (indexOf.call(range(8), c2) >= 0 && indexOf.call(range(8), r2) >= 0 && indexOf.call(targets, index) >= 0) {
        res.push(index); // targets()
      }
    }
  }
  res.sort(function(a, b) {
    return a - b;
  });
  return show('knightHops', res);
};

click = function(index) {
  if (state === 0) {
    state0(index);
  } else if (state === 1) {
    state1(index);
  } else {
    state2(index);
  }
  document.body.innerHTML = '';
  return r4r(() => {
    return game;
  });
};

state0 = (index) => { // handle queen clicks
  if (indexOf.call(queens, index) >= 0) {
    queen = makeQueen(index);
    mask = makeMask(queen);
    illegals = makeIllegals(queen);
    targets = makeTargets(illegals);
    taken = makeTaken(1);
    target = makeTarget(targets[taken]);
    knight = makeKnight(targets);
    knightHops = makeKnightHops(knight);
    state = makeState(1);
    count = makeCount(0);
    counts = makeCounts([]);
    return start = new Date();
  } else {
    return log('not a valid queen position');
  }
};

state1 = (index) => { // handle knight clicks
  if (indexOf.call(knightHops, index) >= 0) {
    knight = index;
    knightHops = makeKnightHops(knight);
    count = makeCount(count + 1);
    if (target === index) {
      if (taken === targets.length - 1) {
        return state = makeState(2);
      } else {
        taken = makeTaken(taken + 1);
        target = makeTarget(targets[taken]);
        counts = makeCounts(_.concat(counts, count));
        return count = makeCount(0);
      }
    }
  } else {
    return log('not a valid knight position');
  }
};

state2 = () => {
  return state = makeState(0);
};

showRects = () => {
  var c, fill, height, i, j, len, r, ref, results, width, x, y;
  ref = range(N * N);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    r = 7 - row(i);
    c = col(i);
    x = S + S * c;
    y = S + S * r;
    width = S;
    height = S;
    fill = ['brown', 'gray'][(r + c) % 2];
    results.push(((i) => {
      return rect({
        x,
        y,
        width,
        height,
        fill,
        onClick: () => {
          return click(i);
        }
      });
    })(i));
  }
  return results;
};

showLittera = () => {
  var i, j, len, ref, results, style, x, y;
  style = {
    "text-anchor": "middle",
    "font-size": 0.5 * S,
    fill: "black"
  };
  ref = range(N);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x = S * (1.5 + i);
    y = S * (0.7 + N - i);
    results.push(g({}, text(_.merge({
      x,
      y: S * (N + 1.7)
    }, style), "abcdefgh"[i]), text(_.merge({
      x: S * 0.5,
      y
    }, style), "12345678"[i])));
  }
  return results;
};

showPieces = (pieces, PIECE, props) => {
  var c, j, len, piece, r, results, x, y;
  results = [];
  for (j = 0, len = pieces.length; j < len; j++) {
    piece = pieces[j];
    if (piece !== -1) {
      r = 7 - row(piece);
      c = col(piece);
      x = S * (1.5 + c);
      y = S * (1.9 + r);
      results.push(((piece) => {
        var props1;
        props1 = _.merge({
          x,
          y,
          "cursor": "default",
          "text-anchor": "middle",
          "font-size": S,
          fill: "white",
          onClick: () => {
            return click(piece);
          }
        }, props);
        return text(props1, PIECE);
      })(piece));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

showCircles = (circles, CIRCLE) => {
  var c, circ, cx, cy, j, len, r, results;
  results = [];
  for (j = 0, len = circles.length; j < len; j++) {
    circ = circles[j];
    if (circ === -1 || circ === queen) {
      continue;
    }
    r = 7 - row(circ);
    c = col(circ);
    cx = S * (1.5 + c);
    cy = S * (1.5 + r);
    results.push(((circ) => {
      return circle(_.merge({
        cx,
        cy,
        r: 10,
        "stroke-width": 4,
        onClick: () => {
          return click(circ);
        }
      }, CIRCLE));
    })(circ));
  }
  return results;
};

showCounts = (counts) => {
  var c, counter, i, index, j, len, r, ref, results, x, y;
  ref = range(counts.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    counter = counts[i];
    index = targets[i];
    r = 7 - row(index);
    c = col(index);
    x = S * (1.5 + c);
    y = S * (1.8 + r);
    results.push(((index) => {
      return text({
        x,
        y,
        "cursor": "default",
        "text-anchor": "middle",
        "font-size": 0.7 * S,
        fill: "black",
        onClick: () => {
          return click(index);
        }
      }, counter);
    })(index));
  }
  return results;
};

showInfo = (info) => {
  var style;
  style = {
    x: 5 * S,
    "text-anchor": "middle",
    "font-size": 0.5 * S,
    fill: "black"
  };
  return g({}, state === 0 ? text(_.merge({
    y: S * (N + 2.5 + 0)
  }, style), 'Click on any queen to start.') : void 0, state === 1 ? text(_.merge({
    y: S * (N + 2.5 + 0)
  }, style), 'Move the knight to the ring.') : void 0, state === 2 ? (text(_.merge({
    y: S * (N + 2.5 + 0)
  }, style), sum(counts), ' moves took ', (new Date() - start) / 1000, ' seconds.'), text(_.merge({
    y: S * (N + 2.5 + 1)
  }, style), 'Click to continue.')) : void 0);
};

state = makeState(0);

queens = makeQueens();

TARGET = {
  stroke: "yellow",
  fill: "none"
};

ILLEGALS = {
  stroke: "none",
  fill: "black",
  r: 6
};

KNIGHT_HOPS = {
  stroke: "none",
  fill: "white",
  r: 6
};

game = () => { // Har ej förstått varför TVÅ loopar behövs.
  return svg({
    viewBox: `0 0 ${10 * S} ${12 * S}`,
    width: 8 * S,
    height: 8 * S
  }, showRects(), showLittera(), () => {
    return showInfo(info);
  }, () => {
    if (state === 0) {
      return showPieces(queens, QUEEN, {
        fill: "black"
      });
    }
  }, () => {
    if (state === 1) {
      return g({}, showCounts(counts), showPieces([queen], QUEEN, {
        fill: "black"
      }), showPieces([knight], KNIGHT, {
        fill: "white"
      }), showCircles([target], TARGET), mask & 1 ? showCircles(illegals, ILLEGALS) : void 0, mask & 2 ? showCircles(knightHops, KNIGHT_HOPS) : void 0);
    }
  }, () => {
    if (state === 2) {
      return g({}, showCounts(counts), showPieces([queen], QUEEN, {
        fill: "black"
      }), mask & 1 ? showCircles(illegals, ILLEGALS) : void 0);
    }
  });
};

r4r(() => {
  return game;
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-013-Knightmoves-solidjs\coffee\sketch8.coffee